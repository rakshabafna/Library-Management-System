/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;
    
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import javax.swing.JPanel;
import model.DBconnection;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.*;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import view.BrowseBooks.Book;
/**
 *
 * @author raksha
 */
public class BrowseBooks extends javax.swing.JPanel {
    private int userId;


    /**
     * Creates new form BrowseBooks
     * 
     */
    JPanel mainPanel;
    public BrowseBooks(JPanel mainPanel,int userId) {
        initComponents();
        this.mainPanel=mainPanel;
        this.userId=userId;
        loadTrendingBooks();
        JScrollPane scrollPane = new JScrollPane(trendingBooksPanel);
scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
scrollPane.getVerticalScrollBar().setUnitIncrement(16);
scrollPane.setBorder(null);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        BrowseBookPanel = new javax.swing.JPanel();
        trendingBooksPanel = new javax.swing.JPanel();
        jScrollBar1 = new javax.swing.JScrollBar();

        setBackground(new java.awt.Color(238, 222, 246));
        setPreferredSize(new java.awt.Dimension(950, 583));

        txtSearch.setForeground(new java.awt.Color(204, 204, 204));
        txtSearch.setText("Search books by title, author, or genre");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/assets/search (1).png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        BrowseBookPanel.setBackground(new java.awt.Color(47, 47, 47));

        trendingBooksPanel.setPreferredSize(new java.awt.Dimension(140, 220));

        javax.swing.GroupLayout trendingBooksPanelLayout = new javax.swing.GroupLayout(trendingBooksPanel);
        trendingBooksPanel.setLayout(trendingBooksPanelLayout);
        trendingBooksPanelLayout.setHorizontalGroup(
            trendingBooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        trendingBooksPanelLayout.setVerticalGroup(
            trendingBooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout BrowseBookPanelLayout = new javax.swing.GroupLayout(BrowseBookPanel);
        BrowseBookPanel.setLayout(BrowseBookPanelLayout);
        BrowseBookPanelLayout.setHorizontalGroup(
            BrowseBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BrowseBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trendingBooksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 910, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        BrowseBookPanelLayout.setVerticalGroup(
            BrowseBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BrowseBookPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(BrowseBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addComponent(trendingBooksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addContainerGap(541, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BrowseBookPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BrowseBookPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        if (txtSearch.getText().isEmpty()) {
            txtSearch.setText("Search books by title, author, or genre");
            txtSearch.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if(txtSearch.getText().equals("Search books by title, author, or genre")){
            txtSearch.setText("");
            txtSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtSearchFocusGained
private void performSearch() {
    String keyword = txtSearch.getText().trim();

    if (keyword.isEmpty() || keyword.equals("Search books by title, author, or genre")) {
        loadTrendingBooks(); 
        return;
    }

    String sql = "SELECT b.id, b.title, b.author, b.isbn, b.genre, b.quantity, b.description, b.price, bi.image_data " +
                 "FROM books b JOIN book_images bi ON b.id = bi.book_id " +
                 "WHERE b.title LIKE ? OR b.genre LIKE ? OR b.author LIKE ?";

    try (Connection conn = DBconnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        String pattern = "%" + keyword + "%";
        stmt.setString(1, pattern); 
        stmt.setString(2, pattern); 
        stmt.setString(3, pattern); 

        ResultSet rs = stmt.executeQuery();
        trendingBooksPanel.removeAll();
        trendingBooksPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
        trendingBooksPanel.setBackground(Color.WHITE);

        boolean found = false;

        while (rs.next()) {
            found = true;
            Book book = new Book(
                rs.getInt("id"),
                rs.getInt("quantity"),
                rs.getString("title"),
                rs.getString("genre"),
                rs.getString("author"),
                rs.getString("isbn"),
                rs.getString("image_data"),
                rs.getString("description"),
                rs.getFloat("price")
            );

            ImageIcon icon = getBookIconFromBase64(book.imagebase64);
            JPanel card = createBookCard(book, icon);
            trendingBooksPanel.add(card);
        }

        if (!found) {
            JLabel label = new JLabel("No matching books found.");
            label.setFont(new Font("SansSerif", Font.PLAIN, 16));
            trendingBooksPanel.add(label);
        }

        trendingBooksPanel.revalidate();
        trendingBooksPanel.repaint();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Search error: " + e.getMessage());
    }
}

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        performSearch();
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        performSearch();
    }//GEN-LAST:event_btnSearchActionPerformed

    
    
    
    
    
    
    
    public class Book{
        int id,quantity;
        String title,genre,author,isbn, description,imagebase64;
        float price;
        public Book(int id,int quantity,String title,String genre,String author,String isbn,String imagebase64,String description,float price){
            this.id=id;
            this.quantity=quantity;
            this.author=author;
            this.title=title;
            this.genre=genre;
            this.isbn=isbn;
            this.imagebase64=imagebase64;
            this.description=description;
            this.price=price;
        }
            }
    

public ImageIcon getBookIconFromBase64(String base64) {
    try {
        byte[] decodedBytes = Base64.getDecoder().decode(base64);
        ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
        BufferedImage bufferedImage = ImageIO.read(bis);
        Image scaledImage = bufferedImage.getScaledInstance(120, 160, Image.SCALE_SMOOTH);
        return new ImageIcon(scaledImage);
    } catch (Exception e) {
        e.printStackTrace();
        return new ImageIcon(); 
    }
}


   private JPanel createBookCard(Book book, ImageIcon icon) {
    JPanel cardPanel = new JPanel(null);
    cardPanel.setPreferredSize(new Dimension(160, 230)); 
    cardPanel.setMaximumSize(new Dimension(160, 230));
    cardPanel.setBackground(Color.WHITE);
    cardPanel.setBorder(BorderFactory.createLineBorder(new Color(180, 180, 180)));

    JLabel imageLabel = new JLabel(icon);
    imageLabel.setBounds(20, 10, 120, 160); 
    cardPanel.add(imageLabel);

    JLabel titleLabel = new JLabel("<html><center>" + book.title + "</center></html>");
    titleLabel.setBounds(10, 175, 140, 20);
    titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
    cardPanel.add(titleLabel);

    JLabel authorLabel = new JLabel("<html><i>" + book.author + "</i></html>");
    authorLabel.setBounds(10, 195, 140, 20);
    authorLabel.setFont(new Font("Arial", Font.PLAIN, 11));
    authorLabel.setForeground(Color.GRAY);
    authorLabel.setHorizontalAlignment(SwingConstants.CENTER);
    cardPanel.add(authorLabel);

    cardPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    cardPanel.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            BookDetail detailPanel = new BookDetail(book,BrowseBooks.this.userId,BrowseBooks.this.mainPanel);
            mainPanel.removeAll();
            mainPanel.setLayout(new BorderLayout());
            mainPanel.add(detailPanel, BorderLayout.CENTER);
            mainPanel.revalidate();
            mainPanel.repaint();
        }

        public void mouseEntered(MouseEvent e) {
            cardPanel.setBackground(new Color(245, 245, 245));
        }

        public void mouseExited(MouseEvent e) {
            cardPanel.setBackground(Color.WHITE);
        }
    });

    return cardPanel;
}



    
    
   public void loadTrendingBooks() {
    try (Connection conn = DriverManager.getConnection(
            "jdbc:sqlserver://localhost:1433;databaseName=LibraryManagement;encrypt=true;trustServerCertificate=true",
            "raksha2", "1234")) {

        String sql = "SELECT b.id, b.title, b.author, b.isbn, b.genre, b.quantity, b.description,b.price, bi.image_data " +
                     "FROM books b JOIN book_images bi ON b.id = bi.book_id " +
                     "ORDER BY b.id DESC";

        PreparedStatement stmt = conn.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();

        trendingBooksPanel.removeAll();
trendingBooksPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 20));
trendingBooksPanel.setBackground(Color.WHITE);


        while (rs.next()) {
            Book book = new Book(
                rs.getInt("id"),
                rs.getInt("quantity"),
                rs.getString("title"),
                rs.getString("genre"),
                rs.getString("author"),
                rs.getString("isbn"),
                rs.getString("image_data"),
                rs.getString("description"),
                rs.getFloat("price")
            );

            ImageIcon icon = getBookIconFromBase64(book.imagebase64);

            JPanel card = createBookCard(book, icon);
            trendingBooksPanel.add(card);
        }

        trendingBooksPanel.revalidate();
        trendingBooksPanel.repaint();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Failed to load trending books.");
    }
}

    
                                                                                            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BrowseBookPanel;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JPanel trendingBooksPanel;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
